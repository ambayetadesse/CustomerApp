{"version":3,"sources":["webpack:///src/app/signup-customer/signup-customer-routing.module.ts","webpack:///src/app/signup-customer/signup-customer.page.html","webpack:///src/app/signup-customer/signup-customer.page.scss","webpack:///src/app/signup-customer/signup-customer.module.ts","webpack:///src/app/Service/shared.service.ts","webpack:///src/app/signup-customer/signup-customer.page.ts"],"names":["routes","path","component","SignupCustomerPageRoutingModule","imports","forChild","exports","SignupCustomerPageModule","declarations","SharedService","currentAddress","restaurant","status","location","orderId","RestaurantLocation","resId","listOfCatagoryFilter","deriverId","customerId","driverName","providedIn","SignupCustomerPage","fb","accountService","alertController","router","geolocation","sharedService","regform","group","separateDialCode","SearchCountryField","CountryISO","PhoneNumberFormat","preferredCountries","UnitedStates","UnitedKingdom","latitude","longitude","getCurrentAddress","value","console","log","FullName","required","email","phonenumber","locationId","password","confirmPassword","type","active","getCurrentCoordinates","getCurrentPosition","then","resp","coords","Address","lat","lon","next","error","get","valid","setValue","internationalNumber","create","subscribe","res","navigate","ErrorAlert","account","header","message","buttons","text","role","cssClass","handler","blah","removeAccount","id","reset","accountId","alert","present","fieldTextType","conformPassword","selector","template"],"mappings":"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","file":"signup-customer-signup-customer-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SignupCustomerPage } from './signup-customer.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SignupCustomerPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SignupCustomerPageRoutingModule {}\n","export default \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n      <ion-buttons slot=\\\"start\\\"> \\n        <ion-back-button defaultHref=\\\"login\\\"></ion-back-button>\\n      </ion-buttons>\\n      <ion-title>Sign in </ion-title>\\n  </ion-toolbar>\\n  <p color=\\\"primary\\\" style=\\\"padding-left: 20px;padding-top: 20px;background-color: #3880ff;\\\">Create an account with new email address</p>\\n</ion-header>\\n\\n<ion-content>\\n  <form [formGroup]=\\\"regform\\\">\\n    <ion-item>\\n      <ion-label>Full Name</ion-label>\\n      <ion-input formControlName=\\\"FullName\\\" type=\\\"text\\\"></ion-input>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>Email </ion-label>\\n      <ion-input formControlName=\\\"email\\\" type=\\\"text\\\"></ion-input>\\n    </ion-item>\\n    <!-- <ion-item>\\n      <ion-label>Phone number</ion-label>\\n      <ion-input formControlName=\\\"phonenumber\\\" type=\\\"text\\\"></ion-input>\\n    </ion-item> -->\\n    <ion-item-group>\\n      <ion-row>\\n        <ion-label style=\\\"margin-left: 11px;\\n        padding-top: 11px;\\\">Phone number</ion-label>\\n      </ion-row>\\n      <ion-row>\\n        <ngx-intl-tel-input \\n        style=\\\"margin-left: 24px;\\n        padding-top: 11px;\\\" \\n        [cssClass]=\\\"'custom'\\\"\\n         [preferredCountries]=\\\"preferredCountries\\\"\\n         [enableAutoCountrySelect]=\\\"true\\\"\\n          [enablePlaceholder]=\\\"true\\\" \\n          [searchCountryFlag]=\\\"true\\\"\\n         [searchCountryField]=\\\"[SearchCountryField.Iso2, SearchCountryField.Name]\\\"\\n          [selectFirstCountry]=\\\"true\\\"\\n         [selectedCountryISO]=\\\"CountryISO.Ethiopia\\\"\\n          [maxLength]=\\\"15\\\" [phoneValidation]=\\\"true\\\"\\n         [separateDialCode]=\\\"true\\\"\\n          [numberFormat]=\\\"PhoneNumberFormat.National\\\" name=\\\"phone\\\"\\n         formControlName=\\\"phonenumber\\\" \\n         [(ngModel)]=\\\"phoneNumber\\\">\\n       </ngx-intl-tel-input>\\n      </ion-row>\\n    </ion-item-group>\\n    <ion-item>\\n      <ion-label>Password</ion-label>\\n      <ion-input [type]=\\\"fieldTextType ? 'text' : 'password'\\\" formControlName=\\\"password\\\" [required]></ion-input>\\n      <i class=\\\"fa\\\" [ngClass]=\\\"{'fa-eye-slash': !fieldTextType,'fa-eye': fieldTextType }\\\"\\n        (click)=\\\"toggleFieldTextType()\\\"></i>\\n    </ion-item>\\n    <ion-item>\\n      <ion-label>Confirm Password</ion-label>\\n      <ion-input [type]=\\\"conformPassword ? 'text' : 'password'\\\" formControlName=\\\"confirmPassword\\\" [required]>\\n      </ion-input>\\n      <i class=\\\"fa\\\" [ngClass]=\\\"{'fa-eye-slash': !conformPassword,'fa-eye': conformPassword }\\\" \\n        (click)=\\\"conPassword()\\\"></i>\\n    </ion-item>\\n    <div style=\\\"text-align: center; margin: auto\\\">\\n      <ion-button expand=\\\"full\\\" (click)=\\\"registerAccount()\\\">\\n        <ion-icon slot=\\\"start\\\" name=\\\"add-circle-outline\\\"></ion-icon>\\n        Sign Up\\n      </ion-button>\\n    </div>\\n    <ion-item>\\n      <ion-label style=\\\"text-align: center\\\">Already have an account ?</ion-label>\\n      <button style=\\\"margin-left: -37px; color: #234ada; background-color: #f8f9fa\\\" (click)=\\\"login()\\\">\\n        Login\\n      </button>\\n    </ion-item>\\n  </form>\\n</ion-content>\\n\";","export default \"ion-content ion-item {\\n  padding: 0;\\n  --border-radius: 14px;\\n}\\n\\nion-content ion-searchbar {\\n  --border-radius: 14px;\\n  --background: rgb(243, 243, 243);\\n  margin-top: -13px;\\n}\\n\\nion-content ion-segment {\\n  margin: 5px 0;\\n}\\n\\nion-header {\\n  background-color: #3880ff;\\n  border-radius: 14px;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uXFwuLlxcLi5cXHNpZ251cC1jdXN0b21lci5wYWdlLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFLUSxVQUFVO0VBRVYscUJBQWdCO0FBSnhCOztBQUhBO0VBWUkscUJBQWdCO0VBQ2hCLGdDQUFhO0VBQ2IsaUJBQWlCO0FBTHJCOztBQVFFO0VBQ0UsYUFBYTtBQUxqQjs7QUFPRTtFQUNFLHlCQUF5QjtFQUN6QixtQkFBbUI7QUFKdkIiLCJmaWxlIjoic2lnbnVwLWN1c3RvbWVyLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbImlvbi1jb250ZW50IHtcclxuICAgIC8vLS1iYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoOTBkZWcsIHJnYmEoNDMsOTAsMTQ4LDEpIDAlLCByZ2JhKDQ1LDExMiwyMjksMSkgMzUlLCByZ2JhKDQ1LDExMiwyMjksMSkgMTAwJSk7XHJcbiAgIFxyXG4gICAgICBpb24taXRlbSB7XHJcbiAgICAgIC8vIC0tYmFja2dyb3VuZDogcmdiKDEyMCwgMTI2LCAxMzQpO1xyXG4gICAgICAgIHBhZGRpbmc6IDA7XHJcbiAgICAgICAvLyBtYXJnaW46IDE0cHggMDtcclxuICAgICAgICAtLWJvcmRlci1yYWRpdXM6IDE0cHg7XHJcbiAgICAgICAvLyBjb2xvcjogI0ZGRkZGRjtcclxuICAgICAgICAvL2ZvbnQtd2VpZ2h0OiA2MDA7XHJcbiAgIH1cclxuICAgaW9uLXNlYXJjaGJhcntcclxuICAgIC0tYm9yZGVyLXJhZGl1czogMTRweDtcclxuICAgIC0tYmFja2dyb3VuZDogcmdiKDI0MywgMjQzLCAyNDMpO1xyXG4gICAgbWFyZ2luLXRvcDogLTEzcHg7XHJcbiAgIH1cclxuICB9XHJcbiAgaW9uLWNvbnRlbnQgaW9uLXNlZ21lbnQge1xyXG4gICAgbWFyZ2luOiA1cHggMDtcclxuICB9XHJcbiAgaW9uLWhlYWRlcntcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICMzODgwZmY7XHJcbiAgICBib3JkZXItcmFkaXVzOiAxNHB4O1xyXG4gIH0iXX0= */\";","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { IonicModule } from '@ionic/angular';\nimport { SignupCustomerPageRoutingModule } from './signup-customer-routing.module';\nimport { SignupCustomerPage } from './signup-customer.page';\nimport { NgxIntlTelInputModule } from 'ngx-intl-tel-input';\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SignupCustomerPageRoutingModule,\n    ReactiveFormsModule,\n    NgxIntlTelInputModule\n  ],\n  declarations: [SignupCustomerPage]\n})\nexport class SignupCustomerPageModule {}\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n@Injectable({\n  providedIn: 'root'\n})\nexport class SharedService {\n  currentAddress = new BehaviorSubject<any>({});\n  restaurant = new BehaviorSubject<any>({});\n  status = new BehaviorSubject<any>({});\n  location = new BehaviorSubject<any>({});\n  orderId = new BehaviorSubject<any> ({});\n  RestaurantLocation = new BehaviorSubject<any>({});\n  resId = new BehaviorSubject<any>({});\n  listOfCatagoryFilter = new BehaviorSubject<any>({});\n  deriverId = new BehaviorSubject<any>({});\n  customerId = new BehaviorSubject<any>({});\n  driverName = new BehaviorSubject<any>({});\n\n  getCurrentAddress(){\n    return this.currentAddress;\n  }\n  getMenuFilter(){\n    return this.listOfCatagoryFilter;\n  }\n  getLocation(){\n    return this.location;\n  }\n  getStatus(){\n    return this.status;\n  }\n  getRestaurantLocation(){\n    return this.RestaurantLocation;\n  }\n  getRestaurantId(){\n    return this.resId;\n  }\n  getDriverId(){\n    return this.deriverId;\n  }\n  getCustomerId(){\n    return this.customerId;\n  }\n  getDriverName(){\n    return this.driverName;\n  }\n  constructor() { }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AlertController } from '@ionic/angular';\nimport { Account } from 'src/Table/table';\nimport { AccountService } from '../Service/account.service';\nimport { SearchCountryField, CountryISO, PhoneNumberFormat } from 'ngx-intl-tel-input';\nimport { SharedService } from '../Service/shared.service';\nimport { Geolocation } from '@ionic-native/geolocation/ngx';\n@Component({\n  selector: 'app-signup-customer',\n  templateUrl: './signup-customer.page.html',\n  styleUrls: ['./signup-customer.page.scss'],\n})\nexport class SignupCustomerPage implements OnInit {\n  regform = this.fb.group({});\n  accountId: any;\n  fieldTextType: boolean;\n  conformPassword:boolean;\n  phoneNumber:number;\n  separateDialCode = false;\n\tSearchCountryField = SearchCountryField;\n\tCountryISO = CountryISO;\n  PhoneNumberFormat = PhoneNumberFormat;\n\tpreferredCountries: CountryISO[] = [CountryISO.UnitedStates, CountryISO.UnitedKingdom];\n  latitude: any = 0; //latitude\n  longitude: any = 0; //longitude\n  Address: { lat: any; lon: any; };\n  constructor(private fb: FormBuilder,\n    private accountService: AccountService,\n    private alertController: AlertController,\n    private router: Router,\n    private geolocation:Geolocation,\n    private sharedService:SharedService) { }\n\n  ngOnInit() {\n   let currentAddress = this.sharedService.getCurrentAddress().value;\n    console.log(currentAddress);\n    this.regform = this.fb.group({\n      FullName: [\"\", Validators.required],\n      email: [\"\", Validators.required],\n      phonenumber: [\"\", Validators.required],\n      locationId: [''],\n      password: [\"\", Validators.required],\n      confirmPassword: [\"\", Validators.required],\n      type:[\"\"],\n      active:[\"\"],\n    })\n    this.getCurrentCoordinates();\n  }\n  getCurrentCoordinates() {\n    this.geolocation.getCurrentPosition().then((resp) => {\n      this.latitude = resp.coords.latitude;\n      this.longitude = resp.coords.longitude;\n      this.Address ={\n        lat:this.latitude,\n        lon:this.longitude\n      }\n      this.sharedService.currentAddress.next(this.Address);\n     // this.getAddress(this.latitude,this.longitude);\n      console.log(resp.coords);\n     }).catch((error) => {\n       console.log('Error getting location', error);\n     });\n  }\n  registerAccount() {\n    if (this.regform.get(\"password\").value === this.regform.get(\"confirmPassword\").value) {\n      if (this.regform.valid) {\n        this.regform.get(\"locationId\").setValue(this.Address);\n          this.regform.get(\"active\").setValue(\"true\");\n          this.regform.get(\"type\").setValue(\"customer\");\n          this.regform.get(\"phonenumber\").setValue((this.regform.get(\"phonenumber\").value).internationalNumber)\n          this.accountService.create(this.regform.value).subscribe(res=>{\n           // alert(res.toString());\n          });\n          this.router.navigate([\"/menu/login\"]);\n        }\n        \n    else {\n        this.ErrorAlert(\"Please Enter All field.\");\n      }\n    }\n    else{\n      this.ErrorAlert(\"Password donot match\");\n    }\n  }\n  login() {\n    this.router.navigate([\"/menu/login\"]);\n  }\n  async presentAlertConfirm(account: Account) {\n    const alert = await this.alertController.create({\n      header: 'Confirm!',\n      message: '<strong>Are you sure you want delete?</strong>',\n      buttons: [\n        {\n          text: 'Cancel',\n          role: 'cancel',\n          cssClass: 'secondary',\n          handler: (blah) => {\n            console.log('Confirm Cancel: blah');\n          }\n        }, {\n          text: 'OK',\n          handler: () => {\n            this.accountService.removeAccount(account.id);\n            this.regform.reset();\n            this.accountId = null;\n          }\n        }\n      ]\n    });\n\n    await alert.present();\n  }\n  async ErrorAlert(message) {\n    const alert = await this.alertController.create({\n      cssClass: 'my-custom-class',\n      header: 'Error',\n      // subHeader: 'Subtitle',\n      message: message,\n      buttons: ['OK']\n    });\n\n    await alert.present();\n  }\n  toggleFieldTextType() {\n    this.fieldTextType = !this.fieldTextType;\n  }\n  conPassword(){\n    this.conformPassword = !this.conformPassword;\n  }\n}\n"]}